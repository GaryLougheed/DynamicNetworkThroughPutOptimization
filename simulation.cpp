#include "simulation.h" 
Simulation::Simulation()
{
  // Create the initial frame work for the network mesh.
    m_mesh = new NetworkMesh(10);
  // Set the timer to zero
    m_currTime = 0;
    m_termTime = 0;

  // Packet send buffer generated by build simulation. Set to NULL on simulation construstion.
    m_sendBuffer = NULL;

}

Simulation::Simulation(const Simulation& mesh)
{
  // Temporary function //TODO: may not be needed
}

Simulation::~Simulation()
{
  delete []m_mesh;
  m_mesh = NULL;
}

bool Simulation::run()
{
  // Declare and initialize simulation parameters

    // Standardize delta time for stability. 0.2?

    // Secure Throughput setting: 1 second. 


  // Obtain current time

  // Loop until termination time

    // Check security information from reports sent to simulation.
       // If a node has been compromised the node will be improved from the mesh.
         // The links associated with the node will be removed.
         // The mesh will enter a lower throughput to prevent information from spreading this occurs if the node is remove or not.
         // Assumption: ALL NODES CAN REPORT to the master secure node(node registry)  FASTER THAN THERE THROUGHPUT. 

    // We need to check the build frame for packets to send at every tick.
 
      // If we have a packet to send the packet.
        // Example: NodeA send packet to NodeC at time 0.3. The tick will occur at 0,0.2,0.4
                 // The packet will be sent at 0.4 for simulation stability.
                 //  
   
    // We need to tick the node registry ever time step. 

    // The packets will be place into the source buffers at certain times.
    
    // These packets will be sent at certain times.

    // Packets that are sent will be received at certain times.

    // 

  return false;
}

bool Simulation::sendPacket()
{
  return false;
}

NetworkMesh Simulation::getNetworkMesh()const
{
  return *m_mesh;
}

ostream& operator<<(ostream& os, const Simulation& sim)
{

   os << "Simulation Data: " << '\n';
   os << "Network Mesh Data: " << sim.getNetworkMesh() << '\n';


  return os;
}
