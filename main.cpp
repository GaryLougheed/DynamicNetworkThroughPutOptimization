// Program Description
/*
   Computer Networking Project
   10/22/2019
//TODO: Destruction menu option number 5  

    Throughput: The amount of bits per second sent from source to destination.
                A packet's size will determine when the packet is sent in the simulation.
                For simulation purposes a packet will have size time_t meaning it takes 1.0 second to send. If the throughput is 10 for a link then the link will send the packet at a rate of 15600 bits per second. 10 times the normalized speed of 1560 bits per second. The simulation takes 1 second to send 1560bits. This means the packet would complete its transmission within 0.1 seconds. This time is maintained by the packet data structure and the simulation handles the simulation time.

    Time Sync: The simulation ticks at 0, 0.2, 0.4, 0.6, ...and so forth.
 
                Example: 
 
      NodeA sends at 0.1 seconds, this is because it sends at 10 times the normal rate or 15600bits per second.
      If NodeA sends to NodeB then the packet will be sent at 0.2 simulation time.
      The packet will maintain the throughput information related to the real time data
      through the transmit method called send(A,B). It is this send(A,B) method that accumulates 
      the realtime data. This accumulation occurs within the packet structure.

      Example continued: NodeA sends to NodeB at 0.1 seconds. NodaB sends to NodeC at a rate of 2                         times the normalized speed. The send speed from B to C is 780 bits per second.                         NodeA sends to NodeB at a rate of 15600 bits per second. This means that
                       NodeB will complete its transmission after 0.5seconds have passed. 

                         Simulation Time:
                
                         At time 0
                           No packet is sent.
 
                         At time 0.2
                           Packet is stored into NodeB inside the NetworkMesh.
                           This packet has a data member that contains the number 0.1(throughput).
                           0.1 is the amount of real time it took to send the packet and 
                           correlates to sending a packet at 10 times the normalized packet
                           send speed. This packet is sent at simulation time 0.2, but the throughput
                           is stored into the packet. The packet maintains the 'actual' throughput
                           as the packet traverses the network in simulated time.
                           
                         At time 0.4
                           No packet is sent, since NodeB needs 0.1(A to B) + (time for B to send to C).
                           In this case,
                           Node B would only be able to send when the condition 0.1 + 0.5 is true.
                           Since the simulated time is less than the time required to send the packet.
                           The packet will not be sent. 
 
                           At time 0.6
                           The packet can be sent to NodeC since the codnition ( A -> B -> C) to
                           traverse is true.
                           Packet is stored into NodeC inside the NetworkMesh. The NetworkMesh
                           has a node registry of all nodes in the mesh.
                           This packet has reached its destination(scanned inside the send method).
                           The packet will report successful send to the simulation.
                           The report is generated by the
                           following method

                           storeReport(if send[i] == True) // TODO: this line remove and explained. 

           Once the time equals the termination time 0.6. The final storeReport will activate
           but the simulation will end.
 
           After termination the simulation will return the main menu after reporting simulation 
           termination information.
               
     // TODO: All delay is calculated within the initialization of the link establishment through the
              buildSim function.

     // TODO: Header size affecting transmission.

         
*/






// Header Files
#include <iostream>
#include "simulation.h"
#include "helperFunctions.h"
using namespace std;

// Global Constants



// Function Prototypes

/*
name:
input:
output:
process:
dependancies:
*/


/*
name: displayTitle()
input: none	
output: a cout message displaying the title of the program
process: iostream sending cout message to terminal/screen
dependancies: iostream
*/
void displayTitle();


/*
name: displayMenu()
input: none 
output: a cout mesage displaying the title of the program
process: iostream sending cout message to terminal/screen
dependancies: iostream
*/
void displayMenu();





// Main program
int main()
{

  // Declare and Initialize variables
  char userInput = '0';
  bool runSimulation = true;
  time_t current_time = 0;
  Simulation hi;
  time_t simRunTime = 0;

  // Networking Simulation

    // Main Loop
    while(runSimulation)
    { 
      // Display TItle
        displayTitle();

      // Display User Menu/Interactions
        displayMenu();



      // TODO: PROMPTFOR INPUT
        cin >> userInput;

      switch( userInput)
      {
        // Upload Network file fstream
        case '1':
               break;

        // Interaction with Network Mesh (add, delete, and change Node Parameters)
        case '2': 
               break;

        // Run Simulation // outputs? parameter duration for simulation.
         // Ask the user how long the simulation should run for, Remind user to use option 4 before 
           // running simulation.
        case '3':
               cout << '\n' << "How long would you like to run the simulation for? ";
               cin >> simRunTime; 
               current_time = time(NULL);
               cout<< "Test: "  << current_time << "seconds passed since processID" << '\n';
               hi.run();
               cout << hi;
               break;

        // Enter Events for the Network.
        case '4':
              // At time T influence the throughput of the network. 

              break;    

      // Print and Send Simulation data to file.  
        case '5':
               printPrompt("Ending Simulation");
               runSimulation = false;
               break;
      }
     }
  return 0;
}

// Function Supporting Implementation


void displayTitle()
{
  printPrompt("Networking Simulation");
}

void displayMenu()
{
  printPrompt("");
  printPrompt(" Networking Temporary Menu");
  printPrompt(" 1. Upload Network Mesh from a file. ");
  printPrompt(" 2. Interact with the Network Mesh, prior to run time. ");
  printPrompt(" 3: Run Simulation, currently testing print function. ");
  printPrompt(" 4. Enter Events for the Simulation. ");
  printPrompt(" 5. Print and Send Simulation data to the file ");
 
}


